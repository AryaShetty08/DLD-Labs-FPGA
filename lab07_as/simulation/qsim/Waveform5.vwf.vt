// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/13/2024 12:56:46"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module top_vlg_sample_tst(
	clk,
	rst,
	sw,
	sampler_tx
);
input  clk;
input  rst;
input [1:0] sw;
output sampler_tx;

reg sample;
time current_time;
always @(clk or rst or sw)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module top_vlg_check_tst (
	ALUResult,
	ALUSrc_out,
	MemtoReg_out,
	ReadData,
	RegDst_out,
	display_led,
	prode_data_memory,
	prode_register_file,
	sampler_rx
);
input [31:0] ALUResult;
input [31:0] ALUSrc_out;
input [31:0] MemtoReg_out;
input [31:0] ReadData;
input [4:0] RegDst_out;
input [6:0] display_led;
input [31:0] prode_data_memory;
input [31:0] prode_register_file;
input sampler_rx;

reg [31:0] ALUResult_expected;
reg [31:0] ALUSrc_out_expected;
reg [31:0] MemtoReg_out_expected;
reg [31:0] ReadData_expected;
reg [4:0] RegDst_out_expected;
reg [6:0] display_led_expected;
reg [31:0] prode_data_memory_expected;
reg [31:0] prode_register_file_expected;

reg [31:0] ALUResult_prev;
reg [31:0] ALUSrc_out_prev;
reg [31:0] MemtoReg_out_prev;
reg [31:0] ReadData_prev;
reg [4:0] RegDst_out_prev;
reg [6:0] display_led_prev;
reg [31:0] prode_data_memory_prev;
reg [31:0] prode_register_file_prev;

reg [31:0] ALUResult_expected_prev;
reg [31:0] ALUSrc_out_expected_prev;
reg [31:0] MemtoReg_out_expected_prev;
reg [31:0] ReadData_expected_prev;
reg [4:0] RegDst_out_expected_prev;
reg [6:0] display_led_expected_prev;
reg [31:0] prode_data_memory_expected_prev;
reg [31:0] prode_register_file_expected_prev;

reg [31:0] last_ALUResult_exp;
reg [31:0] last_ALUSrc_out_exp;
reg [31:0] last_MemtoReg_out_exp;
reg [31:0] last_ReadData_exp;
reg [4:0] last_RegDst_out_exp;
reg [6:0] last_display_led_exp;
reg [31:0] last_prode_data_memory_exp;
reg [31:0] last_prode_register_file_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALUResult_prev = ALUResult;
	ALUSrc_out_prev = ALUSrc_out;
	MemtoReg_out_prev = MemtoReg_out;
	ReadData_prev = ReadData;
	RegDst_out_prev = RegDst_out;
	display_led_prev = display_led;
	prode_data_memory_prev = prode_data_memory;
	prode_register_file_prev = prode_register_file;
end

// update expected /o prevs

always @(trigger)
begin
	ALUResult_expected_prev = ALUResult_expected;
	ALUSrc_out_expected_prev = ALUSrc_out_expected;
	MemtoReg_out_expected_prev = MemtoReg_out_expected;
	ReadData_expected_prev = ReadData_expected;
	RegDst_out_expected_prev = RegDst_out_expected;
	display_led_expected_prev = display_led_expected;
	prode_data_memory_expected_prev = prode_data_memory_expected;
	prode_register_file_expected_prev = prode_register_file_expected;
end


// expected ALUResult[ 31 ]
initial
begin
	ALUResult_expected[31] = 1'bX;
end 
// expected ALUResult[ 30 ]
initial
begin
	ALUResult_expected[30] = 1'bX;
end 
// expected ALUResult[ 29 ]
initial
begin
	ALUResult_expected[29] = 1'bX;
end 
// expected ALUResult[ 28 ]
initial
begin
	ALUResult_expected[28] = 1'bX;
end 
// expected ALUResult[ 27 ]
initial
begin
	ALUResult_expected[27] = 1'bX;
end 
// expected ALUResult[ 26 ]
initial
begin
	ALUResult_expected[26] = 1'bX;
end 
// expected ALUResult[ 25 ]
initial
begin
	ALUResult_expected[25] = 1'bX;
end 
// expected ALUResult[ 24 ]
initial
begin
	ALUResult_expected[24] = 1'bX;
end 
// expected ALUResult[ 23 ]
initial
begin
	ALUResult_expected[23] = 1'bX;
end 
// expected ALUResult[ 22 ]
initial
begin
	ALUResult_expected[22] = 1'bX;
end 
// expected ALUResult[ 21 ]
initial
begin
	ALUResult_expected[21] = 1'bX;
end 
// expected ALUResult[ 20 ]
initial
begin
	ALUResult_expected[20] = 1'bX;
end 
// expected ALUResult[ 19 ]
initial
begin
	ALUResult_expected[19] = 1'bX;
end 
// expected ALUResult[ 18 ]
initial
begin
	ALUResult_expected[18] = 1'bX;
end 
// expected ALUResult[ 17 ]
initial
begin
	ALUResult_expected[17] = 1'bX;
end 
// expected ALUResult[ 16 ]
initial
begin
	ALUResult_expected[16] = 1'bX;
end 
// expected ALUResult[ 15 ]
initial
begin
	ALUResult_expected[15] = 1'bX;
end 
// expected ALUResult[ 14 ]
initial
begin
	ALUResult_expected[14] = 1'bX;
end 
// expected ALUResult[ 13 ]
initial
begin
	ALUResult_expected[13] = 1'bX;
end 
// expected ALUResult[ 12 ]
initial
begin
	ALUResult_expected[12] = 1'bX;
end 
// expected ALUResult[ 11 ]
initial
begin
	ALUResult_expected[11] = 1'bX;
end 
// expected ALUResult[ 10 ]
initial
begin
	ALUResult_expected[10] = 1'bX;
end 
// expected ALUResult[ 9 ]
initial
begin
	ALUResult_expected[9] = 1'bX;
end 
// expected ALUResult[ 8 ]
initial
begin
	ALUResult_expected[8] = 1'bX;
end 
// expected ALUResult[ 7 ]
initial
begin
	ALUResult_expected[7] = 1'bX;
end 
// expected ALUResult[ 6 ]
initial
begin
	ALUResult_expected[6] = 1'bX;
end 
// expected ALUResult[ 5 ]
initial
begin
	ALUResult_expected[5] = 1'bX;
end 
// expected ALUResult[ 4 ]
initial
begin
	ALUResult_expected[4] = 1'bX;
end 
// expected ALUResult[ 3 ]
initial
begin
	ALUResult_expected[3] = 1'bX;
end 
// expected ALUResult[ 2 ]
initial
begin
	ALUResult_expected[2] = 1'bX;
end 
// expected ALUResult[ 1 ]
initial
begin
	ALUResult_expected[1] = 1'bX;
end 
// expected ALUResult[ 0 ]
initial
begin
	ALUResult_expected[0] = 1'bX;
end 
// expected ALUSrc_out[ 31 ]
initial
begin
	ALUSrc_out_expected[31] = 1'bX;
end 
// expected ALUSrc_out[ 30 ]
initial
begin
	ALUSrc_out_expected[30] = 1'bX;
end 
// expected ALUSrc_out[ 29 ]
initial
begin
	ALUSrc_out_expected[29] = 1'bX;
end 
// expected ALUSrc_out[ 28 ]
initial
begin
	ALUSrc_out_expected[28] = 1'bX;
end 
// expected ALUSrc_out[ 27 ]
initial
begin
	ALUSrc_out_expected[27] = 1'bX;
end 
// expected ALUSrc_out[ 26 ]
initial
begin
	ALUSrc_out_expected[26] = 1'bX;
end 
// expected ALUSrc_out[ 25 ]
initial
begin
	ALUSrc_out_expected[25] = 1'bX;
end 
// expected ALUSrc_out[ 24 ]
initial
begin
	ALUSrc_out_expected[24] = 1'bX;
end 
// expected ALUSrc_out[ 23 ]
initial
begin
	ALUSrc_out_expected[23] = 1'bX;
end 
// expected ALUSrc_out[ 22 ]
initial
begin
	ALUSrc_out_expected[22] = 1'bX;
end 
// expected ALUSrc_out[ 21 ]
initial
begin
	ALUSrc_out_expected[21] = 1'bX;
end 
// expected ALUSrc_out[ 20 ]
initial
begin
	ALUSrc_out_expected[20] = 1'bX;
end 
// expected ALUSrc_out[ 19 ]
initial
begin
	ALUSrc_out_expected[19] = 1'bX;
end 
// expected ALUSrc_out[ 18 ]
initial
begin
	ALUSrc_out_expected[18] = 1'bX;
end 
// expected ALUSrc_out[ 17 ]
initial
begin
	ALUSrc_out_expected[17] = 1'bX;
end 
// expected ALUSrc_out[ 16 ]
initial
begin
	ALUSrc_out_expected[16] = 1'bX;
end 
// expected ALUSrc_out[ 15 ]
initial
begin
	ALUSrc_out_expected[15] = 1'bX;
end 
// expected ALUSrc_out[ 14 ]
initial
begin
	ALUSrc_out_expected[14] = 1'bX;
end 
// expected ALUSrc_out[ 13 ]
initial
begin
	ALUSrc_out_expected[13] = 1'bX;
end 
// expected ALUSrc_out[ 12 ]
initial
begin
	ALUSrc_out_expected[12] = 1'bX;
end 
// expected ALUSrc_out[ 11 ]
initial
begin
	ALUSrc_out_expected[11] = 1'bX;
end 
// expected ALUSrc_out[ 10 ]
initial
begin
	ALUSrc_out_expected[10] = 1'bX;
end 
// expected ALUSrc_out[ 9 ]
initial
begin
	ALUSrc_out_expected[9] = 1'bX;
end 
// expected ALUSrc_out[ 8 ]
initial
begin
	ALUSrc_out_expected[8] = 1'bX;
end 
// expected ALUSrc_out[ 7 ]
initial
begin
	ALUSrc_out_expected[7] = 1'bX;
end 
// expected ALUSrc_out[ 6 ]
initial
begin
	ALUSrc_out_expected[6] = 1'bX;
end 
// expected ALUSrc_out[ 5 ]
initial
begin
	ALUSrc_out_expected[5] = 1'bX;
end 
// expected ALUSrc_out[ 4 ]
initial
begin
	ALUSrc_out_expected[4] = 1'bX;
end 
// expected ALUSrc_out[ 3 ]
initial
begin
	ALUSrc_out_expected[3] = 1'bX;
end 
// expected ALUSrc_out[ 2 ]
initial
begin
	ALUSrc_out_expected[2] = 1'bX;
end 
// expected ALUSrc_out[ 1 ]
initial
begin
	ALUSrc_out_expected[1] = 1'bX;
end 
// expected ALUSrc_out[ 0 ]
initial
begin
	ALUSrc_out_expected[0] = 1'bX;
end 
// expected MemtoReg_out[ 31 ]
initial
begin
	MemtoReg_out_expected[31] = 1'bX;
end 
// expected MemtoReg_out[ 30 ]
initial
begin
	MemtoReg_out_expected[30] = 1'bX;
end 
// expected MemtoReg_out[ 29 ]
initial
begin
	MemtoReg_out_expected[29] = 1'bX;
end 
// expected MemtoReg_out[ 28 ]
initial
begin
	MemtoReg_out_expected[28] = 1'bX;
end 
// expected MemtoReg_out[ 27 ]
initial
begin
	MemtoReg_out_expected[27] = 1'bX;
end 
// expected MemtoReg_out[ 26 ]
initial
begin
	MemtoReg_out_expected[26] = 1'bX;
end 
// expected MemtoReg_out[ 25 ]
initial
begin
	MemtoReg_out_expected[25] = 1'bX;
end 
// expected MemtoReg_out[ 24 ]
initial
begin
	MemtoReg_out_expected[24] = 1'bX;
end 
// expected MemtoReg_out[ 23 ]
initial
begin
	MemtoReg_out_expected[23] = 1'bX;
end 
// expected MemtoReg_out[ 22 ]
initial
begin
	MemtoReg_out_expected[22] = 1'bX;
end 
// expected MemtoReg_out[ 21 ]
initial
begin
	MemtoReg_out_expected[21] = 1'bX;
end 
// expected MemtoReg_out[ 20 ]
initial
begin
	MemtoReg_out_expected[20] = 1'bX;
end 
// expected MemtoReg_out[ 19 ]
initial
begin
	MemtoReg_out_expected[19] = 1'bX;
end 
// expected MemtoReg_out[ 18 ]
initial
begin
	MemtoReg_out_expected[18] = 1'bX;
end 
// expected MemtoReg_out[ 17 ]
initial
begin
	MemtoReg_out_expected[17] = 1'bX;
end 
// expected MemtoReg_out[ 16 ]
initial
begin
	MemtoReg_out_expected[16] = 1'bX;
end 
// expected MemtoReg_out[ 15 ]
initial
begin
	MemtoReg_out_expected[15] = 1'bX;
end 
// expected MemtoReg_out[ 14 ]
initial
begin
	MemtoReg_out_expected[14] = 1'bX;
end 
// expected MemtoReg_out[ 13 ]
initial
begin
	MemtoReg_out_expected[13] = 1'bX;
end 
// expected MemtoReg_out[ 12 ]
initial
begin
	MemtoReg_out_expected[12] = 1'bX;
end 
// expected MemtoReg_out[ 11 ]
initial
begin
	MemtoReg_out_expected[11] = 1'bX;
end 
// expected MemtoReg_out[ 10 ]
initial
begin
	MemtoReg_out_expected[10] = 1'bX;
end 
// expected MemtoReg_out[ 9 ]
initial
begin
	MemtoReg_out_expected[9] = 1'bX;
end 
// expected MemtoReg_out[ 8 ]
initial
begin
	MemtoReg_out_expected[8] = 1'bX;
end 
// expected MemtoReg_out[ 7 ]
initial
begin
	MemtoReg_out_expected[7] = 1'bX;
end 
// expected MemtoReg_out[ 6 ]
initial
begin
	MemtoReg_out_expected[6] = 1'bX;
end 
// expected MemtoReg_out[ 5 ]
initial
begin
	MemtoReg_out_expected[5] = 1'bX;
end 
// expected MemtoReg_out[ 4 ]
initial
begin
	MemtoReg_out_expected[4] = 1'bX;
end 
// expected MemtoReg_out[ 3 ]
initial
begin
	MemtoReg_out_expected[3] = 1'bX;
end 
// expected MemtoReg_out[ 2 ]
initial
begin
	MemtoReg_out_expected[2] = 1'bX;
end 
// expected MemtoReg_out[ 1 ]
initial
begin
	MemtoReg_out_expected[1] = 1'bX;
end 
// expected MemtoReg_out[ 0 ]
initial
begin
	MemtoReg_out_expected[0] = 1'bX;
end 
// expected ReadData[ 31 ]
initial
begin
	ReadData_expected[31] = 1'bX;
end 
// expected ReadData[ 30 ]
initial
begin
	ReadData_expected[30] = 1'bX;
end 
// expected ReadData[ 29 ]
initial
begin
	ReadData_expected[29] = 1'bX;
end 
// expected ReadData[ 28 ]
initial
begin
	ReadData_expected[28] = 1'bX;
end 
// expected ReadData[ 27 ]
initial
begin
	ReadData_expected[27] = 1'bX;
end 
// expected ReadData[ 26 ]
initial
begin
	ReadData_expected[26] = 1'bX;
end 
// expected ReadData[ 25 ]
initial
begin
	ReadData_expected[25] = 1'bX;
end 
// expected ReadData[ 24 ]
initial
begin
	ReadData_expected[24] = 1'bX;
end 
// expected ReadData[ 23 ]
initial
begin
	ReadData_expected[23] = 1'bX;
end 
// expected ReadData[ 22 ]
initial
begin
	ReadData_expected[22] = 1'bX;
end 
// expected ReadData[ 21 ]
initial
begin
	ReadData_expected[21] = 1'bX;
end 
// expected ReadData[ 20 ]
initial
begin
	ReadData_expected[20] = 1'bX;
end 
// expected ReadData[ 19 ]
initial
begin
	ReadData_expected[19] = 1'bX;
end 
// expected ReadData[ 18 ]
initial
begin
	ReadData_expected[18] = 1'bX;
end 
// expected ReadData[ 17 ]
initial
begin
	ReadData_expected[17] = 1'bX;
end 
// expected ReadData[ 16 ]
initial
begin
	ReadData_expected[16] = 1'bX;
end 
// expected ReadData[ 15 ]
initial
begin
	ReadData_expected[15] = 1'bX;
end 
// expected ReadData[ 14 ]
initial
begin
	ReadData_expected[14] = 1'bX;
end 
// expected ReadData[ 13 ]
initial
begin
	ReadData_expected[13] = 1'bX;
end 
// expected ReadData[ 12 ]
initial
begin
	ReadData_expected[12] = 1'bX;
end 
// expected ReadData[ 11 ]
initial
begin
	ReadData_expected[11] = 1'bX;
end 
// expected ReadData[ 10 ]
initial
begin
	ReadData_expected[10] = 1'bX;
end 
// expected ReadData[ 9 ]
initial
begin
	ReadData_expected[9] = 1'bX;
end 
// expected ReadData[ 8 ]
initial
begin
	ReadData_expected[8] = 1'bX;
end 
// expected ReadData[ 7 ]
initial
begin
	ReadData_expected[7] = 1'bX;
end 
// expected ReadData[ 6 ]
initial
begin
	ReadData_expected[6] = 1'bX;
end 
// expected ReadData[ 5 ]
initial
begin
	ReadData_expected[5] = 1'bX;
end 
// expected ReadData[ 4 ]
initial
begin
	ReadData_expected[4] = 1'bX;
end 
// expected ReadData[ 3 ]
initial
begin
	ReadData_expected[3] = 1'bX;
end 
// expected ReadData[ 2 ]
initial
begin
	ReadData_expected[2] = 1'bX;
end 
// expected ReadData[ 1 ]
initial
begin
	ReadData_expected[1] = 1'bX;
end 
// expected ReadData[ 0 ]
initial
begin
	ReadData_expected[0] = 1'bX;
end 
// expected RegDst_out[ 4 ]
initial
begin
	RegDst_out_expected[4] = 1'bX;
end 
// expected RegDst_out[ 3 ]
initial
begin
	RegDst_out_expected[3] = 1'bX;
end 
// expected RegDst_out[ 2 ]
initial
begin
	RegDst_out_expected[2] = 1'bX;
end 
// expected RegDst_out[ 1 ]
initial
begin
	RegDst_out_expected[1] = 1'bX;
end 
// expected RegDst_out[ 0 ]
initial
begin
	RegDst_out_expected[0] = 1'bX;
end 
// expected display_led[ 6 ]
initial
begin
	display_led_expected[6] = 1'bX;
end 
// expected display_led[ 5 ]
initial
begin
	display_led_expected[5] = 1'bX;
end 
// expected display_led[ 4 ]
initial
begin
	display_led_expected[4] = 1'bX;
end 
// expected display_led[ 3 ]
initial
begin
	display_led_expected[3] = 1'bX;
end 
// expected display_led[ 2 ]
initial
begin
	display_led_expected[2] = 1'bX;
end 
// expected display_led[ 1 ]
initial
begin
	display_led_expected[1] = 1'bX;
end 
// expected display_led[ 0 ]
initial
begin
	display_led_expected[0] = 1'bX;
end 
// expected prode_data_memory[ 31 ]
initial
begin
	prode_data_memory_expected[31] = 1'bX;
end 
// expected prode_data_memory[ 30 ]
initial
begin
	prode_data_memory_expected[30] = 1'bX;
end 
// expected prode_data_memory[ 29 ]
initial
begin
	prode_data_memory_expected[29] = 1'bX;
end 
// expected prode_data_memory[ 28 ]
initial
begin
	prode_data_memory_expected[28] = 1'bX;
end 
// expected prode_data_memory[ 27 ]
initial
begin
	prode_data_memory_expected[27] = 1'bX;
end 
// expected prode_data_memory[ 26 ]
initial
begin
	prode_data_memory_expected[26] = 1'bX;
end 
// expected prode_data_memory[ 25 ]
initial
begin
	prode_data_memory_expected[25] = 1'bX;
end 
// expected prode_data_memory[ 24 ]
initial
begin
	prode_data_memory_expected[24] = 1'bX;
end 
// expected prode_data_memory[ 23 ]
initial
begin
	prode_data_memory_expected[23] = 1'bX;
end 
// expected prode_data_memory[ 22 ]
initial
begin
	prode_data_memory_expected[22] = 1'bX;
end 
// expected prode_data_memory[ 21 ]
initial
begin
	prode_data_memory_expected[21] = 1'bX;
end 
// expected prode_data_memory[ 20 ]
initial
begin
	prode_data_memory_expected[20] = 1'bX;
end 
// expected prode_data_memory[ 19 ]
initial
begin
	prode_data_memory_expected[19] = 1'bX;
end 
// expected prode_data_memory[ 18 ]
initial
begin
	prode_data_memory_expected[18] = 1'bX;
end 
// expected prode_data_memory[ 17 ]
initial
begin
	prode_data_memory_expected[17] = 1'bX;
end 
// expected prode_data_memory[ 16 ]
initial
begin
	prode_data_memory_expected[16] = 1'bX;
end 
// expected prode_data_memory[ 15 ]
initial
begin
	prode_data_memory_expected[15] = 1'bX;
end 
// expected prode_data_memory[ 14 ]
initial
begin
	prode_data_memory_expected[14] = 1'bX;
end 
// expected prode_data_memory[ 13 ]
initial
begin
	prode_data_memory_expected[13] = 1'bX;
end 
// expected prode_data_memory[ 12 ]
initial
begin
	prode_data_memory_expected[12] = 1'bX;
end 
// expected prode_data_memory[ 11 ]
initial
begin
	prode_data_memory_expected[11] = 1'bX;
end 
// expected prode_data_memory[ 10 ]
initial
begin
	prode_data_memory_expected[10] = 1'bX;
end 
// expected prode_data_memory[ 9 ]
initial
begin
	prode_data_memory_expected[9] = 1'bX;
end 
// expected prode_data_memory[ 8 ]
initial
begin
	prode_data_memory_expected[8] = 1'bX;
end 
// expected prode_data_memory[ 7 ]
initial
begin
	prode_data_memory_expected[7] = 1'bX;
end 
// expected prode_data_memory[ 6 ]
initial
begin
	prode_data_memory_expected[6] = 1'bX;
end 
// expected prode_data_memory[ 5 ]
initial
begin
	prode_data_memory_expected[5] = 1'bX;
end 
// expected prode_data_memory[ 4 ]
initial
begin
	prode_data_memory_expected[4] = 1'bX;
end 
// expected prode_data_memory[ 3 ]
initial
begin
	prode_data_memory_expected[3] = 1'bX;
end 
// expected prode_data_memory[ 2 ]
initial
begin
	prode_data_memory_expected[2] = 1'bX;
end 
// expected prode_data_memory[ 1 ]
initial
begin
	prode_data_memory_expected[1] = 1'bX;
end 
// expected prode_data_memory[ 0 ]
initial
begin
	prode_data_memory_expected[0] = 1'bX;
end 
// expected prode_register_file[ 31 ]
initial
begin
	prode_register_file_expected[31] = 1'bX;
end 
// expected prode_register_file[ 30 ]
initial
begin
	prode_register_file_expected[30] = 1'bX;
end 
// expected prode_register_file[ 29 ]
initial
begin
	prode_register_file_expected[29] = 1'bX;
end 
// expected prode_register_file[ 28 ]
initial
begin
	prode_register_file_expected[28] = 1'bX;
end 
// expected prode_register_file[ 27 ]
initial
begin
	prode_register_file_expected[27] = 1'bX;
end 
// expected prode_register_file[ 26 ]
initial
begin
	prode_register_file_expected[26] = 1'bX;
end 
// expected prode_register_file[ 25 ]
initial
begin
	prode_register_file_expected[25] = 1'bX;
end 
// expected prode_register_file[ 24 ]
initial
begin
	prode_register_file_expected[24] = 1'bX;
end 
// expected prode_register_file[ 23 ]
initial
begin
	prode_register_file_expected[23] = 1'bX;
end 
// expected prode_register_file[ 22 ]
initial
begin
	prode_register_file_expected[22] = 1'bX;
end 
// expected prode_register_file[ 21 ]
initial
begin
	prode_register_file_expected[21] = 1'bX;
end 
// expected prode_register_file[ 20 ]
initial
begin
	prode_register_file_expected[20] = 1'bX;
end 
// expected prode_register_file[ 19 ]
initial
begin
	prode_register_file_expected[19] = 1'bX;
end 
// expected prode_register_file[ 18 ]
initial
begin
	prode_register_file_expected[18] = 1'bX;
end 
// expected prode_register_file[ 17 ]
initial
begin
	prode_register_file_expected[17] = 1'bX;
end 
// expected prode_register_file[ 16 ]
initial
begin
	prode_register_file_expected[16] = 1'bX;
end 
// expected prode_register_file[ 15 ]
initial
begin
	prode_register_file_expected[15] = 1'bX;
end 
// expected prode_register_file[ 14 ]
initial
begin
	prode_register_file_expected[14] = 1'bX;
end 
// expected prode_register_file[ 13 ]
initial
begin
	prode_register_file_expected[13] = 1'bX;
end 
// expected prode_register_file[ 12 ]
initial
begin
	prode_register_file_expected[12] = 1'bX;
end 
// expected prode_register_file[ 11 ]
initial
begin
	prode_register_file_expected[11] = 1'bX;
end 
// expected prode_register_file[ 10 ]
initial
begin
	prode_register_file_expected[10] = 1'bX;
end 
// expected prode_register_file[ 9 ]
initial
begin
	prode_register_file_expected[9] = 1'bX;
end 
// expected prode_register_file[ 8 ]
initial
begin
	prode_register_file_expected[8] = 1'bX;
end 
// expected prode_register_file[ 7 ]
initial
begin
	prode_register_file_expected[7] = 1'bX;
end 
// expected prode_register_file[ 6 ]
initial
begin
	prode_register_file_expected[6] = 1'bX;
end 
// expected prode_register_file[ 5 ]
initial
begin
	prode_register_file_expected[5] = 1'bX;
end 
// expected prode_register_file[ 4 ]
initial
begin
	prode_register_file_expected[4] = 1'bX;
end 
// expected prode_register_file[ 3 ]
initial
begin
	prode_register_file_expected[3] = 1'bX;
end 
// expected prode_register_file[ 2 ]
initial
begin
	prode_register_file_expected[2] = 1'bX;
end 
// expected prode_register_file[ 1 ]
initial
begin
	prode_register_file_expected[1] = 1'bX;
end 
// expected prode_register_file[ 0 ]
initial
begin
	prode_register_file_expected[0] = 1'bX;
end 
// generate trigger
always @(ALUResult_expected or ALUResult or ALUSrc_out_expected or ALUSrc_out or MemtoReg_out_expected or MemtoReg_out or ReadData_expected or ReadData or RegDst_out_expected or RegDst_out or display_led_expected or display_led or prode_data_memory_expected or prode_data_memory or prode_register_file_expected or prode_register_file)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALUResult = %b | expected ALUSrc_out = %b | expected MemtoReg_out = %b | expected ReadData = %b | expected RegDst_out = %b | expected display_led = %b | expected prode_data_memory = %b | expected prode_register_file = %b | ",ALUResult_expected_prev,ALUSrc_out_expected_prev,MemtoReg_out_expected_prev,ReadData_expected_prev,RegDst_out_expected_prev,display_led_expected_prev,prode_data_memory_expected_prev,prode_register_file_expected_prev);
	$display("| real ALUResult = %b | real ALUSrc_out = %b | real MemtoReg_out = %b | real ReadData = %b | real RegDst_out = %b | real display_led = %b | real prode_data_memory = %b | real prode_register_file = %b | ",ALUResult_prev,ALUSrc_out_prev,MemtoReg_out_prev,ReadData_prev,RegDst_out_prev,display_led_prev,prode_data_memory_prev,prode_register_file_prev);
`endif
	if (
		( ALUResult_expected_prev[0] !== 1'bx ) && ( ALUResult_prev[0] !== ALUResult_expected_prev[0] )
		&& ((ALUResult_expected_prev[0] !== last_ALUResult_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[0] = ALUResult_expected_prev[0];
	end
	if (
		( ALUResult_expected_prev[1] !== 1'bx ) && ( ALUResult_prev[1] !== ALUResult_expected_prev[1] )
		&& ((ALUResult_expected_prev[1] !== last_ALUResult_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[1] = ALUResult_expected_prev[1];
	end
	if (
		( ALUResult_expected_prev[2] !== 1'bx ) && ( ALUResult_prev[2] !== ALUResult_expected_prev[2] )
		&& ((ALUResult_expected_prev[2] !== last_ALUResult_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[2] = ALUResult_expected_prev[2];
	end
	if (
		( ALUResult_expected_prev[3] !== 1'bx ) && ( ALUResult_prev[3] !== ALUResult_expected_prev[3] )
		&& ((ALUResult_expected_prev[3] !== last_ALUResult_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[3] = ALUResult_expected_prev[3];
	end
	if (
		( ALUResult_expected_prev[4] !== 1'bx ) && ( ALUResult_prev[4] !== ALUResult_expected_prev[4] )
		&& ((ALUResult_expected_prev[4] !== last_ALUResult_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[4] = ALUResult_expected_prev[4];
	end
	if (
		( ALUResult_expected_prev[5] !== 1'bx ) && ( ALUResult_prev[5] !== ALUResult_expected_prev[5] )
		&& ((ALUResult_expected_prev[5] !== last_ALUResult_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[5] = ALUResult_expected_prev[5];
	end
	if (
		( ALUResult_expected_prev[6] !== 1'bx ) && ( ALUResult_prev[6] !== ALUResult_expected_prev[6] )
		&& ((ALUResult_expected_prev[6] !== last_ALUResult_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[6] = ALUResult_expected_prev[6];
	end
	if (
		( ALUResult_expected_prev[7] !== 1'bx ) && ( ALUResult_prev[7] !== ALUResult_expected_prev[7] )
		&& ((ALUResult_expected_prev[7] !== last_ALUResult_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[7] = ALUResult_expected_prev[7];
	end
	if (
		( ALUResult_expected_prev[8] !== 1'bx ) && ( ALUResult_prev[8] !== ALUResult_expected_prev[8] )
		&& ((ALUResult_expected_prev[8] !== last_ALUResult_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[8] = ALUResult_expected_prev[8];
	end
	if (
		( ALUResult_expected_prev[9] !== 1'bx ) && ( ALUResult_prev[9] !== ALUResult_expected_prev[9] )
		&& ((ALUResult_expected_prev[9] !== last_ALUResult_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[9] = ALUResult_expected_prev[9];
	end
	if (
		( ALUResult_expected_prev[10] !== 1'bx ) && ( ALUResult_prev[10] !== ALUResult_expected_prev[10] )
		&& ((ALUResult_expected_prev[10] !== last_ALUResult_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[10] = ALUResult_expected_prev[10];
	end
	if (
		( ALUResult_expected_prev[11] !== 1'bx ) && ( ALUResult_prev[11] !== ALUResult_expected_prev[11] )
		&& ((ALUResult_expected_prev[11] !== last_ALUResult_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[11] = ALUResult_expected_prev[11];
	end
	if (
		( ALUResult_expected_prev[12] !== 1'bx ) && ( ALUResult_prev[12] !== ALUResult_expected_prev[12] )
		&& ((ALUResult_expected_prev[12] !== last_ALUResult_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[12] = ALUResult_expected_prev[12];
	end
	if (
		( ALUResult_expected_prev[13] !== 1'bx ) && ( ALUResult_prev[13] !== ALUResult_expected_prev[13] )
		&& ((ALUResult_expected_prev[13] !== last_ALUResult_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[13] = ALUResult_expected_prev[13];
	end
	if (
		( ALUResult_expected_prev[14] !== 1'bx ) && ( ALUResult_prev[14] !== ALUResult_expected_prev[14] )
		&& ((ALUResult_expected_prev[14] !== last_ALUResult_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[14] = ALUResult_expected_prev[14];
	end
	if (
		( ALUResult_expected_prev[15] !== 1'bx ) && ( ALUResult_prev[15] !== ALUResult_expected_prev[15] )
		&& ((ALUResult_expected_prev[15] !== last_ALUResult_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[15] = ALUResult_expected_prev[15];
	end
	if (
		( ALUResult_expected_prev[16] !== 1'bx ) && ( ALUResult_prev[16] !== ALUResult_expected_prev[16] )
		&& ((ALUResult_expected_prev[16] !== last_ALUResult_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[16] = ALUResult_expected_prev[16];
	end
	if (
		( ALUResult_expected_prev[17] !== 1'bx ) && ( ALUResult_prev[17] !== ALUResult_expected_prev[17] )
		&& ((ALUResult_expected_prev[17] !== last_ALUResult_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[17] = ALUResult_expected_prev[17];
	end
	if (
		( ALUResult_expected_prev[18] !== 1'bx ) && ( ALUResult_prev[18] !== ALUResult_expected_prev[18] )
		&& ((ALUResult_expected_prev[18] !== last_ALUResult_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[18] = ALUResult_expected_prev[18];
	end
	if (
		( ALUResult_expected_prev[19] !== 1'bx ) && ( ALUResult_prev[19] !== ALUResult_expected_prev[19] )
		&& ((ALUResult_expected_prev[19] !== last_ALUResult_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[19] = ALUResult_expected_prev[19];
	end
	if (
		( ALUResult_expected_prev[20] !== 1'bx ) && ( ALUResult_prev[20] !== ALUResult_expected_prev[20] )
		&& ((ALUResult_expected_prev[20] !== last_ALUResult_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[20] = ALUResult_expected_prev[20];
	end
	if (
		( ALUResult_expected_prev[21] !== 1'bx ) && ( ALUResult_prev[21] !== ALUResult_expected_prev[21] )
		&& ((ALUResult_expected_prev[21] !== last_ALUResult_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[21] = ALUResult_expected_prev[21];
	end
	if (
		( ALUResult_expected_prev[22] !== 1'bx ) && ( ALUResult_prev[22] !== ALUResult_expected_prev[22] )
		&& ((ALUResult_expected_prev[22] !== last_ALUResult_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[22] = ALUResult_expected_prev[22];
	end
	if (
		( ALUResult_expected_prev[23] !== 1'bx ) && ( ALUResult_prev[23] !== ALUResult_expected_prev[23] )
		&& ((ALUResult_expected_prev[23] !== last_ALUResult_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[23] = ALUResult_expected_prev[23];
	end
	if (
		( ALUResult_expected_prev[24] !== 1'bx ) && ( ALUResult_prev[24] !== ALUResult_expected_prev[24] )
		&& ((ALUResult_expected_prev[24] !== last_ALUResult_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[24] = ALUResult_expected_prev[24];
	end
	if (
		( ALUResult_expected_prev[25] !== 1'bx ) && ( ALUResult_prev[25] !== ALUResult_expected_prev[25] )
		&& ((ALUResult_expected_prev[25] !== last_ALUResult_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[25] = ALUResult_expected_prev[25];
	end
	if (
		( ALUResult_expected_prev[26] !== 1'bx ) && ( ALUResult_prev[26] !== ALUResult_expected_prev[26] )
		&& ((ALUResult_expected_prev[26] !== last_ALUResult_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[26] = ALUResult_expected_prev[26];
	end
	if (
		( ALUResult_expected_prev[27] !== 1'bx ) && ( ALUResult_prev[27] !== ALUResult_expected_prev[27] )
		&& ((ALUResult_expected_prev[27] !== last_ALUResult_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[27] = ALUResult_expected_prev[27];
	end
	if (
		( ALUResult_expected_prev[28] !== 1'bx ) && ( ALUResult_prev[28] !== ALUResult_expected_prev[28] )
		&& ((ALUResult_expected_prev[28] !== last_ALUResult_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[28] = ALUResult_expected_prev[28];
	end
	if (
		( ALUResult_expected_prev[29] !== 1'bx ) && ( ALUResult_prev[29] !== ALUResult_expected_prev[29] )
		&& ((ALUResult_expected_prev[29] !== last_ALUResult_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[29] = ALUResult_expected_prev[29];
	end
	if (
		( ALUResult_expected_prev[30] !== 1'bx ) && ( ALUResult_prev[30] !== ALUResult_expected_prev[30] )
		&& ((ALUResult_expected_prev[30] !== last_ALUResult_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[30] = ALUResult_expected_prev[30];
	end
	if (
		( ALUResult_expected_prev[31] !== 1'bx ) && ( ALUResult_prev[31] !== ALUResult_expected_prev[31] )
		&& ((ALUResult_expected_prev[31] !== last_ALUResult_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUResult[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUResult_expected_prev);
		$display ("     Real value = %b", ALUResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALUResult_exp[31] = ALUResult_expected_prev[31];
	end
	if (
		( ALUSrc_out_expected_prev[0] !== 1'bx ) && ( ALUSrc_out_prev[0] !== ALUSrc_out_expected_prev[0] )
		&& ((ALUSrc_out_expected_prev[0] !== last_ALUSrc_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[0] = ALUSrc_out_expected_prev[0];
	end
	if (
		( ALUSrc_out_expected_prev[1] !== 1'bx ) && ( ALUSrc_out_prev[1] !== ALUSrc_out_expected_prev[1] )
		&& ((ALUSrc_out_expected_prev[1] !== last_ALUSrc_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[1] = ALUSrc_out_expected_prev[1];
	end
	if (
		( ALUSrc_out_expected_prev[2] !== 1'bx ) && ( ALUSrc_out_prev[2] !== ALUSrc_out_expected_prev[2] )
		&& ((ALUSrc_out_expected_prev[2] !== last_ALUSrc_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[2] = ALUSrc_out_expected_prev[2];
	end
	if (
		( ALUSrc_out_expected_prev[3] !== 1'bx ) && ( ALUSrc_out_prev[3] !== ALUSrc_out_expected_prev[3] )
		&& ((ALUSrc_out_expected_prev[3] !== last_ALUSrc_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[3] = ALUSrc_out_expected_prev[3];
	end
	if (
		( ALUSrc_out_expected_prev[4] !== 1'bx ) && ( ALUSrc_out_prev[4] !== ALUSrc_out_expected_prev[4] )
		&& ((ALUSrc_out_expected_prev[4] !== last_ALUSrc_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[4] = ALUSrc_out_expected_prev[4];
	end
	if (
		( ALUSrc_out_expected_prev[5] !== 1'bx ) && ( ALUSrc_out_prev[5] !== ALUSrc_out_expected_prev[5] )
		&& ((ALUSrc_out_expected_prev[5] !== last_ALUSrc_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[5] = ALUSrc_out_expected_prev[5];
	end
	if (
		( ALUSrc_out_expected_prev[6] !== 1'bx ) && ( ALUSrc_out_prev[6] !== ALUSrc_out_expected_prev[6] )
		&& ((ALUSrc_out_expected_prev[6] !== last_ALUSrc_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[6] = ALUSrc_out_expected_prev[6];
	end
	if (
		( ALUSrc_out_expected_prev[7] !== 1'bx ) && ( ALUSrc_out_prev[7] !== ALUSrc_out_expected_prev[7] )
		&& ((ALUSrc_out_expected_prev[7] !== last_ALUSrc_out_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[7] = ALUSrc_out_expected_prev[7];
	end
	if (
		( ALUSrc_out_expected_prev[8] !== 1'bx ) && ( ALUSrc_out_prev[8] !== ALUSrc_out_expected_prev[8] )
		&& ((ALUSrc_out_expected_prev[8] !== last_ALUSrc_out_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[8] = ALUSrc_out_expected_prev[8];
	end
	if (
		( ALUSrc_out_expected_prev[9] !== 1'bx ) && ( ALUSrc_out_prev[9] !== ALUSrc_out_expected_prev[9] )
		&& ((ALUSrc_out_expected_prev[9] !== last_ALUSrc_out_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[9] = ALUSrc_out_expected_prev[9];
	end
	if (
		( ALUSrc_out_expected_prev[10] !== 1'bx ) && ( ALUSrc_out_prev[10] !== ALUSrc_out_expected_prev[10] )
		&& ((ALUSrc_out_expected_prev[10] !== last_ALUSrc_out_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[10] = ALUSrc_out_expected_prev[10];
	end
	if (
		( ALUSrc_out_expected_prev[11] !== 1'bx ) && ( ALUSrc_out_prev[11] !== ALUSrc_out_expected_prev[11] )
		&& ((ALUSrc_out_expected_prev[11] !== last_ALUSrc_out_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[11] = ALUSrc_out_expected_prev[11];
	end
	if (
		( ALUSrc_out_expected_prev[12] !== 1'bx ) && ( ALUSrc_out_prev[12] !== ALUSrc_out_expected_prev[12] )
		&& ((ALUSrc_out_expected_prev[12] !== last_ALUSrc_out_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[12] = ALUSrc_out_expected_prev[12];
	end
	if (
		( ALUSrc_out_expected_prev[13] !== 1'bx ) && ( ALUSrc_out_prev[13] !== ALUSrc_out_expected_prev[13] )
		&& ((ALUSrc_out_expected_prev[13] !== last_ALUSrc_out_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[13] = ALUSrc_out_expected_prev[13];
	end
	if (
		( ALUSrc_out_expected_prev[14] !== 1'bx ) && ( ALUSrc_out_prev[14] !== ALUSrc_out_expected_prev[14] )
		&& ((ALUSrc_out_expected_prev[14] !== last_ALUSrc_out_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[14] = ALUSrc_out_expected_prev[14];
	end
	if (
		( ALUSrc_out_expected_prev[15] !== 1'bx ) && ( ALUSrc_out_prev[15] !== ALUSrc_out_expected_prev[15] )
		&& ((ALUSrc_out_expected_prev[15] !== last_ALUSrc_out_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[15] = ALUSrc_out_expected_prev[15];
	end
	if (
		( ALUSrc_out_expected_prev[16] !== 1'bx ) && ( ALUSrc_out_prev[16] !== ALUSrc_out_expected_prev[16] )
		&& ((ALUSrc_out_expected_prev[16] !== last_ALUSrc_out_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[16] = ALUSrc_out_expected_prev[16];
	end
	if (
		( ALUSrc_out_expected_prev[17] !== 1'bx ) && ( ALUSrc_out_prev[17] !== ALUSrc_out_expected_prev[17] )
		&& ((ALUSrc_out_expected_prev[17] !== last_ALUSrc_out_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[17] = ALUSrc_out_expected_prev[17];
	end
	if (
		( ALUSrc_out_expected_prev[18] !== 1'bx ) && ( ALUSrc_out_prev[18] !== ALUSrc_out_expected_prev[18] )
		&& ((ALUSrc_out_expected_prev[18] !== last_ALUSrc_out_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[18] = ALUSrc_out_expected_prev[18];
	end
	if (
		( ALUSrc_out_expected_prev[19] !== 1'bx ) && ( ALUSrc_out_prev[19] !== ALUSrc_out_expected_prev[19] )
		&& ((ALUSrc_out_expected_prev[19] !== last_ALUSrc_out_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[19] = ALUSrc_out_expected_prev[19];
	end
	if (
		( ALUSrc_out_expected_prev[20] !== 1'bx ) && ( ALUSrc_out_prev[20] !== ALUSrc_out_expected_prev[20] )
		&& ((ALUSrc_out_expected_prev[20] !== last_ALUSrc_out_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[20] = ALUSrc_out_expected_prev[20];
	end
	if (
		( ALUSrc_out_expected_prev[21] !== 1'bx ) && ( ALUSrc_out_prev[21] !== ALUSrc_out_expected_prev[21] )
		&& ((ALUSrc_out_expected_prev[21] !== last_ALUSrc_out_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[21] = ALUSrc_out_expected_prev[21];
	end
	if (
		( ALUSrc_out_expected_prev[22] !== 1'bx ) && ( ALUSrc_out_prev[22] !== ALUSrc_out_expected_prev[22] )
		&& ((ALUSrc_out_expected_prev[22] !== last_ALUSrc_out_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[22] = ALUSrc_out_expected_prev[22];
	end
	if (
		( ALUSrc_out_expected_prev[23] !== 1'bx ) && ( ALUSrc_out_prev[23] !== ALUSrc_out_expected_prev[23] )
		&& ((ALUSrc_out_expected_prev[23] !== last_ALUSrc_out_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[23] = ALUSrc_out_expected_prev[23];
	end
	if (
		( ALUSrc_out_expected_prev[24] !== 1'bx ) && ( ALUSrc_out_prev[24] !== ALUSrc_out_expected_prev[24] )
		&& ((ALUSrc_out_expected_prev[24] !== last_ALUSrc_out_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[24] = ALUSrc_out_expected_prev[24];
	end
	if (
		( ALUSrc_out_expected_prev[25] !== 1'bx ) && ( ALUSrc_out_prev[25] !== ALUSrc_out_expected_prev[25] )
		&& ((ALUSrc_out_expected_prev[25] !== last_ALUSrc_out_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[25] = ALUSrc_out_expected_prev[25];
	end
	if (
		( ALUSrc_out_expected_prev[26] !== 1'bx ) && ( ALUSrc_out_prev[26] !== ALUSrc_out_expected_prev[26] )
		&& ((ALUSrc_out_expected_prev[26] !== last_ALUSrc_out_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[26] = ALUSrc_out_expected_prev[26];
	end
	if (
		( ALUSrc_out_expected_prev[27] !== 1'bx ) && ( ALUSrc_out_prev[27] !== ALUSrc_out_expected_prev[27] )
		&& ((ALUSrc_out_expected_prev[27] !== last_ALUSrc_out_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[27] = ALUSrc_out_expected_prev[27];
	end
	if (
		( ALUSrc_out_expected_prev[28] !== 1'bx ) && ( ALUSrc_out_prev[28] !== ALUSrc_out_expected_prev[28] )
		&& ((ALUSrc_out_expected_prev[28] !== last_ALUSrc_out_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[28] = ALUSrc_out_expected_prev[28];
	end
	if (
		( ALUSrc_out_expected_prev[29] !== 1'bx ) && ( ALUSrc_out_prev[29] !== ALUSrc_out_expected_prev[29] )
		&& ((ALUSrc_out_expected_prev[29] !== last_ALUSrc_out_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[29] = ALUSrc_out_expected_prev[29];
	end
	if (
		( ALUSrc_out_expected_prev[30] !== 1'bx ) && ( ALUSrc_out_prev[30] !== ALUSrc_out_expected_prev[30] )
		&& ((ALUSrc_out_expected_prev[30] !== last_ALUSrc_out_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[30] = ALUSrc_out_expected_prev[30];
	end
	if (
		( ALUSrc_out_expected_prev[31] !== 1'bx ) && ( ALUSrc_out_prev[31] !== ALUSrc_out_expected_prev[31] )
		&& ((ALUSrc_out_expected_prev[31] !== last_ALUSrc_out_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUSrc_out[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUSrc_out_expected_prev);
		$display ("     Real value = %b", ALUSrc_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUSrc_out_exp[31] = ALUSrc_out_expected_prev[31];
	end
	if (
		( MemtoReg_out_expected_prev[0] !== 1'bx ) && ( MemtoReg_out_prev[0] !== MemtoReg_out_expected_prev[0] )
		&& ((MemtoReg_out_expected_prev[0] !== last_MemtoReg_out_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[0] = MemtoReg_out_expected_prev[0];
	end
	if (
		( MemtoReg_out_expected_prev[1] !== 1'bx ) && ( MemtoReg_out_prev[1] !== MemtoReg_out_expected_prev[1] )
		&& ((MemtoReg_out_expected_prev[1] !== last_MemtoReg_out_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[1] = MemtoReg_out_expected_prev[1];
	end
	if (
		( MemtoReg_out_expected_prev[2] !== 1'bx ) && ( MemtoReg_out_prev[2] !== MemtoReg_out_expected_prev[2] )
		&& ((MemtoReg_out_expected_prev[2] !== last_MemtoReg_out_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[2] = MemtoReg_out_expected_prev[2];
	end
	if (
		( MemtoReg_out_expected_prev[3] !== 1'bx ) && ( MemtoReg_out_prev[3] !== MemtoReg_out_expected_prev[3] )
		&& ((MemtoReg_out_expected_prev[3] !== last_MemtoReg_out_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[3] = MemtoReg_out_expected_prev[3];
	end
	if (
		( MemtoReg_out_expected_prev[4] !== 1'bx ) && ( MemtoReg_out_prev[4] !== MemtoReg_out_expected_prev[4] )
		&& ((MemtoReg_out_expected_prev[4] !== last_MemtoReg_out_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[4] = MemtoReg_out_expected_prev[4];
	end
	if (
		( MemtoReg_out_expected_prev[5] !== 1'bx ) && ( MemtoReg_out_prev[5] !== MemtoReg_out_expected_prev[5] )
		&& ((MemtoReg_out_expected_prev[5] !== last_MemtoReg_out_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[5] = MemtoReg_out_expected_prev[5];
	end
	if (
		( MemtoReg_out_expected_prev[6] !== 1'bx ) && ( MemtoReg_out_prev[6] !== MemtoReg_out_expected_prev[6] )
		&& ((MemtoReg_out_expected_prev[6] !== last_MemtoReg_out_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[6] = MemtoReg_out_expected_prev[6];
	end
	if (
		( MemtoReg_out_expected_prev[7] !== 1'bx ) && ( MemtoReg_out_prev[7] !== MemtoReg_out_expected_prev[7] )
		&& ((MemtoReg_out_expected_prev[7] !== last_MemtoReg_out_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[7] = MemtoReg_out_expected_prev[7];
	end
	if (
		( MemtoReg_out_expected_prev[8] !== 1'bx ) && ( MemtoReg_out_prev[8] !== MemtoReg_out_expected_prev[8] )
		&& ((MemtoReg_out_expected_prev[8] !== last_MemtoReg_out_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[8] = MemtoReg_out_expected_prev[8];
	end
	if (
		( MemtoReg_out_expected_prev[9] !== 1'bx ) && ( MemtoReg_out_prev[9] !== MemtoReg_out_expected_prev[9] )
		&& ((MemtoReg_out_expected_prev[9] !== last_MemtoReg_out_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[9] = MemtoReg_out_expected_prev[9];
	end
	if (
		( MemtoReg_out_expected_prev[10] !== 1'bx ) && ( MemtoReg_out_prev[10] !== MemtoReg_out_expected_prev[10] )
		&& ((MemtoReg_out_expected_prev[10] !== last_MemtoReg_out_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[10] = MemtoReg_out_expected_prev[10];
	end
	if (
		( MemtoReg_out_expected_prev[11] !== 1'bx ) && ( MemtoReg_out_prev[11] !== MemtoReg_out_expected_prev[11] )
		&& ((MemtoReg_out_expected_prev[11] !== last_MemtoReg_out_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[11] = MemtoReg_out_expected_prev[11];
	end
	if (
		( MemtoReg_out_expected_prev[12] !== 1'bx ) && ( MemtoReg_out_prev[12] !== MemtoReg_out_expected_prev[12] )
		&& ((MemtoReg_out_expected_prev[12] !== last_MemtoReg_out_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[12] = MemtoReg_out_expected_prev[12];
	end
	if (
		( MemtoReg_out_expected_prev[13] !== 1'bx ) && ( MemtoReg_out_prev[13] !== MemtoReg_out_expected_prev[13] )
		&& ((MemtoReg_out_expected_prev[13] !== last_MemtoReg_out_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[13] = MemtoReg_out_expected_prev[13];
	end
	if (
		( MemtoReg_out_expected_prev[14] !== 1'bx ) && ( MemtoReg_out_prev[14] !== MemtoReg_out_expected_prev[14] )
		&& ((MemtoReg_out_expected_prev[14] !== last_MemtoReg_out_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[14] = MemtoReg_out_expected_prev[14];
	end
	if (
		( MemtoReg_out_expected_prev[15] !== 1'bx ) && ( MemtoReg_out_prev[15] !== MemtoReg_out_expected_prev[15] )
		&& ((MemtoReg_out_expected_prev[15] !== last_MemtoReg_out_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[15] = MemtoReg_out_expected_prev[15];
	end
	if (
		( MemtoReg_out_expected_prev[16] !== 1'bx ) && ( MemtoReg_out_prev[16] !== MemtoReg_out_expected_prev[16] )
		&& ((MemtoReg_out_expected_prev[16] !== last_MemtoReg_out_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[16] = MemtoReg_out_expected_prev[16];
	end
	if (
		( MemtoReg_out_expected_prev[17] !== 1'bx ) && ( MemtoReg_out_prev[17] !== MemtoReg_out_expected_prev[17] )
		&& ((MemtoReg_out_expected_prev[17] !== last_MemtoReg_out_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[17] = MemtoReg_out_expected_prev[17];
	end
	if (
		( MemtoReg_out_expected_prev[18] !== 1'bx ) && ( MemtoReg_out_prev[18] !== MemtoReg_out_expected_prev[18] )
		&& ((MemtoReg_out_expected_prev[18] !== last_MemtoReg_out_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[18] = MemtoReg_out_expected_prev[18];
	end
	if (
		( MemtoReg_out_expected_prev[19] !== 1'bx ) && ( MemtoReg_out_prev[19] !== MemtoReg_out_expected_prev[19] )
		&& ((MemtoReg_out_expected_prev[19] !== last_MemtoReg_out_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[19] = MemtoReg_out_expected_prev[19];
	end
	if (
		( MemtoReg_out_expected_prev[20] !== 1'bx ) && ( MemtoReg_out_prev[20] !== MemtoReg_out_expected_prev[20] )
		&& ((MemtoReg_out_expected_prev[20] !== last_MemtoReg_out_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[20] = MemtoReg_out_expected_prev[20];
	end
	if (
		( MemtoReg_out_expected_prev[21] !== 1'bx ) && ( MemtoReg_out_prev[21] !== MemtoReg_out_expected_prev[21] )
		&& ((MemtoReg_out_expected_prev[21] !== last_MemtoReg_out_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[21] = MemtoReg_out_expected_prev[21];
	end
	if (
		( MemtoReg_out_expected_prev[22] !== 1'bx ) && ( MemtoReg_out_prev[22] !== MemtoReg_out_expected_prev[22] )
		&& ((MemtoReg_out_expected_prev[22] !== last_MemtoReg_out_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[22] = MemtoReg_out_expected_prev[22];
	end
	if (
		( MemtoReg_out_expected_prev[23] !== 1'bx ) && ( MemtoReg_out_prev[23] !== MemtoReg_out_expected_prev[23] )
		&& ((MemtoReg_out_expected_prev[23] !== last_MemtoReg_out_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[23] = MemtoReg_out_expected_prev[23];
	end
	if (
		( MemtoReg_out_expected_prev[24] !== 1'bx ) && ( MemtoReg_out_prev[24] !== MemtoReg_out_expected_prev[24] )
		&& ((MemtoReg_out_expected_prev[24] !== last_MemtoReg_out_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[24] = MemtoReg_out_expected_prev[24];
	end
	if (
		( MemtoReg_out_expected_prev[25] !== 1'bx ) && ( MemtoReg_out_prev[25] !== MemtoReg_out_expected_prev[25] )
		&& ((MemtoReg_out_expected_prev[25] !== last_MemtoReg_out_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[25] = MemtoReg_out_expected_prev[25];
	end
	if (
		( MemtoReg_out_expected_prev[26] !== 1'bx ) && ( MemtoReg_out_prev[26] !== MemtoReg_out_expected_prev[26] )
		&& ((MemtoReg_out_expected_prev[26] !== last_MemtoReg_out_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[26] = MemtoReg_out_expected_prev[26];
	end
	if (
		( MemtoReg_out_expected_prev[27] !== 1'bx ) && ( MemtoReg_out_prev[27] !== MemtoReg_out_expected_prev[27] )
		&& ((MemtoReg_out_expected_prev[27] !== last_MemtoReg_out_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[27] = MemtoReg_out_expected_prev[27];
	end
	if (
		( MemtoReg_out_expected_prev[28] !== 1'bx ) && ( MemtoReg_out_prev[28] !== MemtoReg_out_expected_prev[28] )
		&& ((MemtoReg_out_expected_prev[28] !== last_MemtoReg_out_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[28] = MemtoReg_out_expected_prev[28];
	end
	if (
		( MemtoReg_out_expected_prev[29] !== 1'bx ) && ( MemtoReg_out_prev[29] !== MemtoReg_out_expected_prev[29] )
		&& ((MemtoReg_out_expected_prev[29] !== last_MemtoReg_out_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[29] = MemtoReg_out_expected_prev[29];
	end
	if (
		( MemtoReg_out_expected_prev[30] !== 1'bx ) && ( MemtoReg_out_prev[30] !== MemtoReg_out_expected_prev[30] )
		&& ((MemtoReg_out_expected_prev[30] !== last_MemtoReg_out_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[30] = MemtoReg_out_expected_prev[30];
	end
	if (
		( MemtoReg_out_expected_prev[31] !== 1'bx ) && ( MemtoReg_out_prev[31] !== MemtoReg_out_expected_prev[31] )
		&& ((MemtoReg_out_expected_prev[31] !== last_MemtoReg_out_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemtoReg_out[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemtoReg_out_expected_prev);
		$display ("     Real value = %b", MemtoReg_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemtoReg_out_exp[31] = MemtoReg_out_expected_prev[31];
	end
	if (
		( ReadData_expected_prev[0] !== 1'bx ) && ( ReadData_prev[0] !== ReadData_expected_prev[0] )
		&& ((ReadData_expected_prev[0] !== last_ReadData_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[0] = ReadData_expected_prev[0];
	end
	if (
		( ReadData_expected_prev[1] !== 1'bx ) && ( ReadData_prev[1] !== ReadData_expected_prev[1] )
		&& ((ReadData_expected_prev[1] !== last_ReadData_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[1] = ReadData_expected_prev[1];
	end
	if (
		( ReadData_expected_prev[2] !== 1'bx ) && ( ReadData_prev[2] !== ReadData_expected_prev[2] )
		&& ((ReadData_expected_prev[2] !== last_ReadData_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[2] = ReadData_expected_prev[2];
	end
	if (
		( ReadData_expected_prev[3] !== 1'bx ) && ( ReadData_prev[3] !== ReadData_expected_prev[3] )
		&& ((ReadData_expected_prev[3] !== last_ReadData_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[3] = ReadData_expected_prev[3];
	end
	if (
		( ReadData_expected_prev[4] !== 1'bx ) && ( ReadData_prev[4] !== ReadData_expected_prev[4] )
		&& ((ReadData_expected_prev[4] !== last_ReadData_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[4] = ReadData_expected_prev[4];
	end
	if (
		( ReadData_expected_prev[5] !== 1'bx ) && ( ReadData_prev[5] !== ReadData_expected_prev[5] )
		&& ((ReadData_expected_prev[5] !== last_ReadData_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[5] = ReadData_expected_prev[5];
	end
	if (
		( ReadData_expected_prev[6] !== 1'bx ) && ( ReadData_prev[6] !== ReadData_expected_prev[6] )
		&& ((ReadData_expected_prev[6] !== last_ReadData_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[6] = ReadData_expected_prev[6];
	end
	if (
		( ReadData_expected_prev[7] !== 1'bx ) && ( ReadData_prev[7] !== ReadData_expected_prev[7] )
		&& ((ReadData_expected_prev[7] !== last_ReadData_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[7] = ReadData_expected_prev[7];
	end
	if (
		( ReadData_expected_prev[8] !== 1'bx ) && ( ReadData_prev[8] !== ReadData_expected_prev[8] )
		&& ((ReadData_expected_prev[8] !== last_ReadData_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[8] = ReadData_expected_prev[8];
	end
	if (
		( ReadData_expected_prev[9] !== 1'bx ) && ( ReadData_prev[9] !== ReadData_expected_prev[9] )
		&& ((ReadData_expected_prev[9] !== last_ReadData_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[9] = ReadData_expected_prev[9];
	end
	if (
		( ReadData_expected_prev[10] !== 1'bx ) && ( ReadData_prev[10] !== ReadData_expected_prev[10] )
		&& ((ReadData_expected_prev[10] !== last_ReadData_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[10] = ReadData_expected_prev[10];
	end
	if (
		( ReadData_expected_prev[11] !== 1'bx ) && ( ReadData_prev[11] !== ReadData_expected_prev[11] )
		&& ((ReadData_expected_prev[11] !== last_ReadData_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[11] = ReadData_expected_prev[11];
	end
	if (
		( ReadData_expected_prev[12] !== 1'bx ) && ( ReadData_prev[12] !== ReadData_expected_prev[12] )
		&& ((ReadData_expected_prev[12] !== last_ReadData_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[12] = ReadData_expected_prev[12];
	end
	if (
		( ReadData_expected_prev[13] !== 1'bx ) && ( ReadData_prev[13] !== ReadData_expected_prev[13] )
		&& ((ReadData_expected_prev[13] !== last_ReadData_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[13] = ReadData_expected_prev[13];
	end
	if (
		( ReadData_expected_prev[14] !== 1'bx ) && ( ReadData_prev[14] !== ReadData_expected_prev[14] )
		&& ((ReadData_expected_prev[14] !== last_ReadData_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[14] = ReadData_expected_prev[14];
	end
	if (
		( ReadData_expected_prev[15] !== 1'bx ) && ( ReadData_prev[15] !== ReadData_expected_prev[15] )
		&& ((ReadData_expected_prev[15] !== last_ReadData_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[15] = ReadData_expected_prev[15];
	end
	if (
		( ReadData_expected_prev[16] !== 1'bx ) && ( ReadData_prev[16] !== ReadData_expected_prev[16] )
		&& ((ReadData_expected_prev[16] !== last_ReadData_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[16] = ReadData_expected_prev[16];
	end
	if (
		( ReadData_expected_prev[17] !== 1'bx ) && ( ReadData_prev[17] !== ReadData_expected_prev[17] )
		&& ((ReadData_expected_prev[17] !== last_ReadData_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[17] = ReadData_expected_prev[17];
	end
	if (
		( ReadData_expected_prev[18] !== 1'bx ) && ( ReadData_prev[18] !== ReadData_expected_prev[18] )
		&& ((ReadData_expected_prev[18] !== last_ReadData_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[18] = ReadData_expected_prev[18];
	end
	if (
		( ReadData_expected_prev[19] !== 1'bx ) && ( ReadData_prev[19] !== ReadData_expected_prev[19] )
		&& ((ReadData_expected_prev[19] !== last_ReadData_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[19] = ReadData_expected_prev[19];
	end
	if (
		( ReadData_expected_prev[20] !== 1'bx ) && ( ReadData_prev[20] !== ReadData_expected_prev[20] )
		&& ((ReadData_expected_prev[20] !== last_ReadData_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[20] = ReadData_expected_prev[20];
	end
	if (
		( ReadData_expected_prev[21] !== 1'bx ) && ( ReadData_prev[21] !== ReadData_expected_prev[21] )
		&& ((ReadData_expected_prev[21] !== last_ReadData_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[21] = ReadData_expected_prev[21];
	end
	if (
		( ReadData_expected_prev[22] !== 1'bx ) && ( ReadData_prev[22] !== ReadData_expected_prev[22] )
		&& ((ReadData_expected_prev[22] !== last_ReadData_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[22] = ReadData_expected_prev[22];
	end
	if (
		( ReadData_expected_prev[23] !== 1'bx ) && ( ReadData_prev[23] !== ReadData_expected_prev[23] )
		&& ((ReadData_expected_prev[23] !== last_ReadData_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[23] = ReadData_expected_prev[23];
	end
	if (
		( ReadData_expected_prev[24] !== 1'bx ) && ( ReadData_prev[24] !== ReadData_expected_prev[24] )
		&& ((ReadData_expected_prev[24] !== last_ReadData_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[24] = ReadData_expected_prev[24];
	end
	if (
		( ReadData_expected_prev[25] !== 1'bx ) && ( ReadData_prev[25] !== ReadData_expected_prev[25] )
		&& ((ReadData_expected_prev[25] !== last_ReadData_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[25] = ReadData_expected_prev[25];
	end
	if (
		( ReadData_expected_prev[26] !== 1'bx ) && ( ReadData_prev[26] !== ReadData_expected_prev[26] )
		&& ((ReadData_expected_prev[26] !== last_ReadData_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[26] = ReadData_expected_prev[26];
	end
	if (
		( ReadData_expected_prev[27] !== 1'bx ) && ( ReadData_prev[27] !== ReadData_expected_prev[27] )
		&& ((ReadData_expected_prev[27] !== last_ReadData_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[27] = ReadData_expected_prev[27];
	end
	if (
		( ReadData_expected_prev[28] !== 1'bx ) && ( ReadData_prev[28] !== ReadData_expected_prev[28] )
		&& ((ReadData_expected_prev[28] !== last_ReadData_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[28] = ReadData_expected_prev[28];
	end
	if (
		( ReadData_expected_prev[29] !== 1'bx ) && ( ReadData_prev[29] !== ReadData_expected_prev[29] )
		&& ((ReadData_expected_prev[29] !== last_ReadData_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[29] = ReadData_expected_prev[29];
	end
	if (
		( ReadData_expected_prev[30] !== 1'bx ) && ( ReadData_prev[30] !== ReadData_expected_prev[30] )
		&& ((ReadData_expected_prev[30] !== last_ReadData_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[30] = ReadData_expected_prev[30];
	end
	if (
		( ReadData_expected_prev[31] !== 1'bx ) && ( ReadData_prev[31] !== ReadData_expected_prev[31] )
		&& ((ReadData_expected_prev[31] !== last_ReadData_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ReadData[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ReadData_expected_prev);
		$display ("     Real value = %b", ReadData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ReadData_exp[31] = ReadData_expected_prev[31];
	end
	if (
		( RegDst_out_expected_prev[0] !== 1'bx ) && ( RegDst_out_prev[0] !== RegDst_out_expected_prev[0] )
		&& ((RegDst_out_expected_prev[0] !== last_RegDst_out_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDst_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDst_out_expected_prev);
		$display ("     Real value = %b", RegDst_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RegDst_out_exp[0] = RegDst_out_expected_prev[0];
	end
	if (
		( RegDst_out_expected_prev[1] !== 1'bx ) && ( RegDst_out_prev[1] !== RegDst_out_expected_prev[1] )
		&& ((RegDst_out_expected_prev[1] !== last_RegDst_out_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDst_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDst_out_expected_prev);
		$display ("     Real value = %b", RegDst_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RegDst_out_exp[1] = RegDst_out_expected_prev[1];
	end
	if (
		( RegDst_out_expected_prev[2] !== 1'bx ) && ( RegDst_out_prev[2] !== RegDst_out_expected_prev[2] )
		&& ((RegDst_out_expected_prev[2] !== last_RegDst_out_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDst_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDst_out_expected_prev);
		$display ("     Real value = %b", RegDst_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RegDst_out_exp[2] = RegDst_out_expected_prev[2];
	end
	if (
		( RegDst_out_expected_prev[3] !== 1'bx ) && ( RegDst_out_prev[3] !== RegDst_out_expected_prev[3] )
		&& ((RegDst_out_expected_prev[3] !== last_RegDst_out_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDst_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDst_out_expected_prev);
		$display ("     Real value = %b", RegDst_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RegDst_out_exp[3] = RegDst_out_expected_prev[3];
	end
	if (
		( RegDst_out_expected_prev[4] !== 1'bx ) && ( RegDst_out_prev[4] !== RegDst_out_expected_prev[4] )
		&& ((RegDst_out_expected_prev[4] !== last_RegDst_out_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RegDst_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RegDst_out_expected_prev);
		$display ("     Real value = %b", RegDst_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RegDst_out_exp[4] = RegDst_out_expected_prev[4];
	end
	if (
		( display_led_expected_prev[0] !== 1'bx ) && ( display_led_prev[0] !== display_led_expected_prev[0] )
		&& ((display_led_expected_prev[0] !== last_display_led_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_led[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_led_expected_prev);
		$display ("     Real value = %b", display_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display_led_exp[0] = display_led_expected_prev[0];
	end
	if (
		( display_led_expected_prev[1] !== 1'bx ) && ( display_led_prev[1] !== display_led_expected_prev[1] )
		&& ((display_led_expected_prev[1] !== last_display_led_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_led[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_led_expected_prev);
		$display ("     Real value = %b", display_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display_led_exp[1] = display_led_expected_prev[1];
	end
	if (
		( display_led_expected_prev[2] !== 1'bx ) && ( display_led_prev[2] !== display_led_expected_prev[2] )
		&& ((display_led_expected_prev[2] !== last_display_led_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_led[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_led_expected_prev);
		$display ("     Real value = %b", display_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display_led_exp[2] = display_led_expected_prev[2];
	end
	if (
		( display_led_expected_prev[3] !== 1'bx ) && ( display_led_prev[3] !== display_led_expected_prev[3] )
		&& ((display_led_expected_prev[3] !== last_display_led_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_led[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_led_expected_prev);
		$display ("     Real value = %b", display_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display_led_exp[3] = display_led_expected_prev[3];
	end
	if (
		( display_led_expected_prev[4] !== 1'bx ) && ( display_led_prev[4] !== display_led_expected_prev[4] )
		&& ((display_led_expected_prev[4] !== last_display_led_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_led[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_led_expected_prev);
		$display ("     Real value = %b", display_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display_led_exp[4] = display_led_expected_prev[4];
	end
	if (
		( display_led_expected_prev[5] !== 1'bx ) && ( display_led_prev[5] !== display_led_expected_prev[5] )
		&& ((display_led_expected_prev[5] !== last_display_led_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_led[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_led_expected_prev);
		$display ("     Real value = %b", display_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display_led_exp[5] = display_led_expected_prev[5];
	end
	if (
		( display_led_expected_prev[6] !== 1'bx ) && ( display_led_prev[6] !== display_led_expected_prev[6] )
		&& ((display_led_expected_prev[6] !== last_display_led_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display_led[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display_led_expected_prev);
		$display ("     Real value = %b", display_led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_display_led_exp[6] = display_led_expected_prev[6];
	end
	if (
		( prode_data_memory_expected_prev[0] !== 1'bx ) && ( prode_data_memory_prev[0] !== prode_data_memory_expected_prev[0] )
		&& ((prode_data_memory_expected_prev[0] !== last_prode_data_memory_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[0] = prode_data_memory_expected_prev[0];
	end
	if (
		( prode_data_memory_expected_prev[1] !== 1'bx ) && ( prode_data_memory_prev[1] !== prode_data_memory_expected_prev[1] )
		&& ((prode_data_memory_expected_prev[1] !== last_prode_data_memory_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[1] = prode_data_memory_expected_prev[1];
	end
	if (
		( prode_data_memory_expected_prev[2] !== 1'bx ) && ( prode_data_memory_prev[2] !== prode_data_memory_expected_prev[2] )
		&& ((prode_data_memory_expected_prev[2] !== last_prode_data_memory_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[2] = prode_data_memory_expected_prev[2];
	end
	if (
		( prode_data_memory_expected_prev[3] !== 1'bx ) && ( prode_data_memory_prev[3] !== prode_data_memory_expected_prev[3] )
		&& ((prode_data_memory_expected_prev[3] !== last_prode_data_memory_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[3] = prode_data_memory_expected_prev[3];
	end
	if (
		( prode_data_memory_expected_prev[4] !== 1'bx ) && ( prode_data_memory_prev[4] !== prode_data_memory_expected_prev[4] )
		&& ((prode_data_memory_expected_prev[4] !== last_prode_data_memory_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[4] = prode_data_memory_expected_prev[4];
	end
	if (
		( prode_data_memory_expected_prev[5] !== 1'bx ) && ( prode_data_memory_prev[5] !== prode_data_memory_expected_prev[5] )
		&& ((prode_data_memory_expected_prev[5] !== last_prode_data_memory_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[5] = prode_data_memory_expected_prev[5];
	end
	if (
		( prode_data_memory_expected_prev[6] !== 1'bx ) && ( prode_data_memory_prev[6] !== prode_data_memory_expected_prev[6] )
		&& ((prode_data_memory_expected_prev[6] !== last_prode_data_memory_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[6] = prode_data_memory_expected_prev[6];
	end
	if (
		( prode_data_memory_expected_prev[7] !== 1'bx ) && ( prode_data_memory_prev[7] !== prode_data_memory_expected_prev[7] )
		&& ((prode_data_memory_expected_prev[7] !== last_prode_data_memory_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[7] = prode_data_memory_expected_prev[7];
	end
	if (
		( prode_data_memory_expected_prev[8] !== 1'bx ) && ( prode_data_memory_prev[8] !== prode_data_memory_expected_prev[8] )
		&& ((prode_data_memory_expected_prev[8] !== last_prode_data_memory_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[8] = prode_data_memory_expected_prev[8];
	end
	if (
		( prode_data_memory_expected_prev[9] !== 1'bx ) && ( prode_data_memory_prev[9] !== prode_data_memory_expected_prev[9] )
		&& ((prode_data_memory_expected_prev[9] !== last_prode_data_memory_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[9] = prode_data_memory_expected_prev[9];
	end
	if (
		( prode_data_memory_expected_prev[10] !== 1'bx ) && ( prode_data_memory_prev[10] !== prode_data_memory_expected_prev[10] )
		&& ((prode_data_memory_expected_prev[10] !== last_prode_data_memory_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[10] = prode_data_memory_expected_prev[10];
	end
	if (
		( prode_data_memory_expected_prev[11] !== 1'bx ) && ( prode_data_memory_prev[11] !== prode_data_memory_expected_prev[11] )
		&& ((prode_data_memory_expected_prev[11] !== last_prode_data_memory_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[11] = prode_data_memory_expected_prev[11];
	end
	if (
		( prode_data_memory_expected_prev[12] !== 1'bx ) && ( prode_data_memory_prev[12] !== prode_data_memory_expected_prev[12] )
		&& ((prode_data_memory_expected_prev[12] !== last_prode_data_memory_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[12] = prode_data_memory_expected_prev[12];
	end
	if (
		( prode_data_memory_expected_prev[13] !== 1'bx ) && ( prode_data_memory_prev[13] !== prode_data_memory_expected_prev[13] )
		&& ((prode_data_memory_expected_prev[13] !== last_prode_data_memory_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[13] = prode_data_memory_expected_prev[13];
	end
	if (
		( prode_data_memory_expected_prev[14] !== 1'bx ) && ( prode_data_memory_prev[14] !== prode_data_memory_expected_prev[14] )
		&& ((prode_data_memory_expected_prev[14] !== last_prode_data_memory_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[14] = prode_data_memory_expected_prev[14];
	end
	if (
		( prode_data_memory_expected_prev[15] !== 1'bx ) && ( prode_data_memory_prev[15] !== prode_data_memory_expected_prev[15] )
		&& ((prode_data_memory_expected_prev[15] !== last_prode_data_memory_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[15] = prode_data_memory_expected_prev[15];
	end
	if (
		( prode_data_memory_expected_prev[16] !== 1'bx ) && ( prode_data_memory_prev[16] !== prode_data_memory_expected_prev[16] )
		&& ((prode_data_memory_expected_prev[16] !== last_prode_data_memory_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[16] = prode_data_memory_expected_prev[16];
	end
	if (
		( prode_data_memory_expected_prev[17] !== 1'bx ) && ( prode_data_memory_prev[17] !== prode_data_memory_expected_prev[17] )
		&& ((prode_data_memory_expected_prev[17] !== last_prode_data_memory_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[17] = prode_data_memory_expected_prev[17];
	end
	if (
		( prode_data_memory_expected_prev[18] !== 1'bx ) && ( prode_data_memory_prev[18] !== prode_data_memory_expected_prev[18] )
		&& ((prode_data_memory_expected_prev[18] !== last_prode_data_memory_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[18] = prode_data_memory_expected_prev[18];
	end
	if (
		( prode_data_memory_expected_prev[19] !== 1'bx ) && ( prode_data_memory_prev[19] !== prode_data_memory_expected_prev[19] )
		&& ((prode_data_memory_expected_prev[19] !== last_prode_data_memory_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[19] = prode_data_memory_expected_prev[19];
	end
	if (
		( prode_data_memory_expected_prev[20] !== 1'bx ) && ( prode_data_memory_prev[20] !== prode_data_memory_expected_prev[20] )
		&& ((prode_data_memory_expected_prev[20] !== last_prode_data_memory_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[20] = prode_data_memory_expected_prev[20];
	end
	if (
		( prode_data_memory_expected_prev[21] !== 1'bx ) && ( prode_data_memory_prev[21] !== prode_data_memory_expected_prev[21] )
		&& ((prode_data_memory_expected_prev[21] !== last_prode_data_memory_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[21] = prode_data_memory_expected_prev[21];
	end
	if (
		( prode_data_memory_expected_prev[22] !== 1'bx ) && ( prode_data_memory_prev[22] !== prode_data_memory_expected_prev[22] )
		&& ((prode_data_memory_expected_prev[22] !== last_prode_data_memory_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[22] = prode_data_memory_expected_prev[22];
	end
	if (
		( prode_data_memory_expected_prev[23] !== 1'bx ) && ( prode_data_memory_prev[23] !== prode_data_memory_expected_prev[23] )
		&& ((prode_data_memory_expected_prev[23] !== last_prode_data_memory_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[23] = prode_data_memory_expected_prev[23];
	end
	if (
		( prode_data_memory_expected_prev[24] !== 1'bx ) && ( prode_data_memory_prev[24] !== prode_data_memory_expected_prev[24] )
		&& ((prode_data_memory_expected_prev[24] !== last_prode_data_memory_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[24] = prode_data_memory_expected_prev[24];
	end
	if (
		( prode_data_memory_expected_prev[25] !== 1'bx ) && ( prode_data_memory_prev[25] !== prode_data_memory_expected_prev[25] )
		&& ((prode_data_memory_expected_prev[25] !== last_prode_data_memory_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[25] = prode_data_memory_expected_prev[25];
	end
	if (
		( prode_data_memory_expected_prev[26] !== 1'bx ) && ( prode_data_memory_prev[26] !== prode_data_memory_expected_prev[26] )
		&& ((prode_data_memory_expected_prev[26] !== last_prode_data_memory_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[26] = prode_data_memory_expected_prev[26];
	end
	if (
		( prode_data_memory_expected_prev[27] !== 1'bx ) && ( prode_data_memory_prev[27] !== prode_data_memory_expected_prev[27] )
		&& ((prode_data_memory_expected_prev[27] !== last_prode_data_memory_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[27] = prode_data_memory_expected_prev[27];
	end
	if (
		( prode_data_memory_expected_prev[28] !== 1'bx ) && ( prode_data_memory_prev[28] !== prode_data_memory_expected_prev[28] )
		&& ((prode_data_memory_expected_prev[28] !== last_prode_data_memory_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[28] = prode_data_memory_expected_prev[28];
	end
	if (
		( prode_data_memory_expected_prev[29] !== 1'bx ) && ( prode_data_memory_prev[29] !== prode_data_memory_expected_prev[29] )
		&& ((prode_data_memory_expected_prev[29] !== last_prode_data_memory_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[29] = prode_data_memory_expected_prev[29];
	end
	if (
		( prode_data_memory_expected_prev[30] !== 1'bx ) && ( prode_data_memory_prev[30] !== prode_data_memory_expected_prev[30] )
		&& ((prode_data_memory_expected_prev[30] !== last_prode_data_memory_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[30] = prode_data_memory_expected_prev[30];
	end
	if (
		( prode_data_memory_expected_prev[31] !== 1'bx ) && ( prode_data_memory_prev[31] !== prode_data_memory_expected_prev[31] )
		&& ((prode_data_memory_expected_prev[31] !== last_prode_data_memory_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_data_memory[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_data_memory_expected_prev);
		$display ("     Real value = %b", prode_data_memory_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_prode_data_memory_exp[31] = prode_data_memory_expected_prev[31];
	end
	if (
		( prode_register_file_expected_prev[0] !== 1'bx ) && ( prode_register_file_prev[0] !== prode_register_file_expected_prev[0] )
		&& ((prode_register_file_expected_prev[0] !== last_prode_register_file_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[0] = prode_register_file_expected_prev[0];
	end
	if (
		( prode_register_file_expected_prev[1] !== 1'bx ) && ( prode_register_file_prev[1] !== prode_register_file_expected_prev[1] )
		&& ((prode_register_file_expected_prev[1] !== last_prode_register_file_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[1] = prode_register_file_expected_prev[1];
	end
	if (
		( prode_register_file_expected_prev[2] !== 1'bx ) && ( prode_register_file_prev[2] !== prode_register_file_expected_prev[2] )
		&& ((prode_register_file_expected_prev[2] !== last_prode_register_file_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[2] = prode_register_file_expected_prev[2];
	end
	if (
		( prode_register_file_expected_prev[3] !== 1'bx ) && ( prode_register_file_prev[3] !== prode_register_file_expected_prev[3] )
		&& ((prode_register_file_expected_prev[3] !== last_prode_register_file_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[3] = prode_register_file_expected_prev[3];
	end
	if (
		( prode_register_file_expected_prev[4] !== 1'bx ) && ( prode_register_file_prev[4] !== prode_register_file_expected_prev[4] )
		&& ((prode_register_file_expected_prev[4] !== last_prode_register_file_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[4] = prode_register_file_expected_prev[4];
	end
	if (
		( prode_register_file_expected_prev[5] !== 1'bx ) && ( prode_register_file_prev[5] !== prode_register_file_expected_prev[5] )
		&& ((prode_register_file_expected_prev[5] !== last_prode_register_file_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[5] = prode_register_file_expected_prev[5];
	end
	if (
		( prode_register_file_expected_prev[6] !== 1'bx ) && ( prode_register_file_prev[6] !== prode_register_file_expected_prev[6] )
		&& ((prode_register_file_expected_prev[6] !== last_prode_register_file_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[6] = prode_register_file_expected_prev[6];
	end
	if (
		( prode_register_file_expected_prev[7] !== 1'bx ) && ( prode_register_file_prev[7] !== prode_register_file_expected_prev[7] )
		&& ((prode_register_file_expected_prev[7] !== last_prode_register_file_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[7] = prode_register_file_expected_prev[7];
	end
	if (
		( prode_register_file_expected_prev[8] !== 1'bx ) && ( prode_register_file_prev[8] !== prode_register_file_expected_prev[8] )
		&& ((prode_register_file_expected_prev[8] !== last_prode_register_file_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[8] = prode_register_file_expected_prev[8];
	end
	if (
		( prode_register_file_expected_prev[9] !== 1'bx ) && ( prode_register_file_prev[9] !== prode_register_file_expected_prev[9] )
		&& ((prode_register_file_expected_prev[9] !== last_prode_register_file_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[9] = prode_register_file_expected_prev[9];
	end
	if (
		( prode_register_file_expected_prev[10] !== 1'bx ) && ( prode_register_file_prev[10] !== prode_register_file_expected_prev[10] )
		&& ((prode_register_file_expected_prev[10] !== last_prode_register_file_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[10] = prode_register_file_expected_prev[10];
	end
	if (
		( prode_register_file_expected_prev[11] !== 1'bx ) && ( prode_register_file_prev[11] !== prode_register_file_expected_prev[11] )
		&& ((prode_register_file_expected_prev[11] !== last_prode_register_file_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[11] = prode_register_file_expected_prev[11];
	end
	if (
		( prode_register_file_expected_prev[12] !== 1'bx ) && ( prode_register_file_prev[12] !== prode_register_file_expected_prev[12] )
		&& ((prode_register_file_expected_prev[12] !== last_prode_register_file_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[12] = prode_register_file_expected_prev[12];
	end
	if (
		( prode_register_file_expected_prev[13] !== 1'bx ) && ( prode_register_file_prev[13] !== prode_register_file_expected_prev[13] )
		&& ((prode_register_file_expected_prev[13] !== last_prode_register_file_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[13] = prode_register_file_expected_prev[13];
	end
	if (
		( prode_register_file_expected_prev[14] !== 1'bx ) && ( prode_register_file_prev[14] !== prode_register_file_expected_prev[14] )
		&& ((prode_register_file_expected_prev[14] !== last_prode_register_file_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[14] = prode_register_file_expected_prev[14];
	end
	if (
		( prode_register_file_expected_prev[15] !== 1'bx ) && ( prode_register_file_prev[15] !== prode_register_file_expected_prev[15] )
		&& ((prode_register_file_expected_prev[15] !== last_prode_register_file_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[15] = prode_register_file_expected_prev[15];
	end
	if (
		( prode_register_file_expected_prev[16] !== 1'bx ) && ( prode_register_file_prev[16] !== prode_register_file_expected_prev[16] )
		&& ((prode_register_file_expected_prev[16] !== last_prode_register_file_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[16] = prode_register_file_expected_prev[16];
	end
	if (
		( prode_register_file_expected_prev[17] !== 1'bx ) && ( prode_register_file_prev[17] !== prode_register_file_expected_prev[17] )
		&& ((prode_register_file_expected_prev[17] !== last_prode_register_file_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[17] = prode_register_file_expected_prev[17];
	end
	if (
		( prode_register_file_expected_prev[18] !== 1'bx ) && ( prode_register_file_prev[18] !== prode_register_file_expected_prev[18] )
		&& ((prode_register_file_expected_prev[18] !== last_prode_register_file_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[18] = prode_register_file_expected_prev[18];
	end
	if (
		( prode_register_file_expected_prev[19] !== 1'bx ) && ( prode_register_file_prev[19] !== prode_register_file_expected_prev[19] )
		&& ((prode_register_file_expected_prev[19] !== last_prode_register_file_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[19] = prode_register_file_expected_prev[19];
	end
	if (
		( prode_register_file_expected_prev[20] !== 1'bx ) && ( prode_register_file_prev[20] !== prode_register_file_expected_prev[20] )
		&& ((prode_register_file_expected_prev[20] !== last_prode_register_file_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[20] = prode_register_file_expected_prev[20];
	end
	if (
		( prode_register_file_expected_prev[21] !== 1'bx ) && ( prode_register_file_prev[21] !== prode_register_file_expected_prev[21] )
		&& ((prode_register_file_expected_prev[21] !== last_prode_register_file_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[21] = prode_register_file_expected_prev[21];
	end
	if (
		( prode_register_file_expected_prev[22] !== 1'bx ) && ( prode_register_file_prev[22] !== prode_register_file_expected_prev[22] )
		&& ((prode_register_file_expected_prev[22] !== last_prode_register_file_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[22] = prode_register_file_expected_prev[22];
	end
	if (
		( prode_register_file_expected_prev[23] !== 1'bx ) && ( prode_register_file_prev[23] !== prode_register_file_expected_prev[23] )
		&& ((prode_register_file_expected_prev[23] !== last_prode_register_file_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[23] = prode_register_file_expected_prev[23];
	end
	if (
		( prode_register_file_expected_prev[24] !== 1'bx ) && ( prode_register_file_prev[24] !== prode_register_file_expected_prev[24] )
		&& ((prode_register_file_expected_prev[24] !== last_prode_register_file_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[24] = prode_register_file_expected_prev[24];
	end
	if (
		( prode_register_file_expected_prev[25] !== 1'bx ) && ( prode_register_file_prev[25] !== prode_register_file_expected_prev[25] )
		&& ((prode_register_file_expected_prev[25] !== last_prode_register_file_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[25] = prode_register_file_expected_prev[25];
	end
	if (
		( prode_register_file_expected_prev[26] !== 1'bx ) && ( prode_register_file_prev[26] !== prode_register_file_expected_prev[26] )
		&& ((prode_register_file_expected_prev[26] !== last_prode_register_file_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[26] = prode_register_file_expected_prev[26];
	end
	if (
		( prode_register_file_expected_prev[27] !== 1'bx ) && ( prode_register_file_prev[27] !== prode_register_file_expected_prev[27] )
		&& ((prode_register_file_expected_prev[27] !== last_prode_register_file_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[27] = prode_register_file_expected_prev[27];
	end
	if (
		( prode_register_file_expected_prev[28] !== 1'bx ) && ( prode_register_file_prev[28] !== prode_register_file_expected_prev[28] )
		&& ((prode_register_file_expected_prev[28] !== last_prode_register_file_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[28] = prode_register_file_expected_prev[28];
	end
	if (
		( prode_register_file_expected_prev[29] !== 1'bx ) && ( prode_register_file_prev[29] !== prode_register_file_expected_prev[29] )
		&& ((prode_register_file_expected_prev[29] !== last_prode_register_file_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[29] = prode_register_file_expected_prev[29];
	end
	if (
		( prode_register_file_expected_prev[30] !== 1'bx ) && ( prode_register_file_prev[30] !== prode_register_file_expected_prev[30] )
		&& ((prode_register_file_expected_prev[30] !== last_prode_register_file_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[30] = prode_register_file_expected_prev[30];
	end
	if (
		( prode_register_file_expected_prev[31] !== 1'bx ) && ( prode_register_file_prev[31] !== prode_register_file_expected_prev[31] )
		&& ((prode_register_file_expected_prev[31] !== last_prode_register_file_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port prode_register_file[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", prode_register_file_expected_prev);
		$display ("     Real value = %b", prode_register_file_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_prode_register_file_exp[31] = prode_register_file_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst;
reg [1:0] sw;
// wires                                               
wire [31:0] ALUResult;
wire [31:0] ALUSrc_out;
wire [31:0] MemtoReg_out;
wire [31:0] ReadData;
wire [4:0] RegDst_out;
wire [6:0] display_led;
wire [31:0] prode_data_memory;
wire [31:0] prode_register_file;

wire sampler;                             

// assign statements (if any)                          
top i1 (
// port map - connection between master ports and signals/registers   
	.ALUResult(ALUResult),
	.ALUSrc_out(ALUSrc_out),
	.MemtoReg_out(MemtoReg_out),
	.ReadData(ReadData),
	.RegDst_out(RegDst_out),
	.clk(clk),
	.display_led(display_led),
	.prode_data_memory(prode_data_memory),
	.prode_register_file(prode_register_file),
	.rst(rst),
	.sw(sw)
);

// clk
initial
begin
	repeat(13)
	begin
		clk = 1'b0;
		clk = #37500 1'b1;
		# 37500;
	end
	clk = 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #40000 1'b0;
end 
// sw[ 1 ]
initial
begin
	sw[1] = 1'b0;
	sw[1] = #600000 1'b1;
	sw[1] = #360000 1'b0;
end 
// sw[ 0 ]
initial
begin
	sw[0] = 1'b0;
	sw[0] = #40000 1'b1;
	sw[0] = #420000 1'b0;
end 

top_vlg_sample_tst tb_sample (
	.clk(clk),
	.rst(rst),
	.sw(sw),
	.sampler_tx(sampler)
);

top_vlg_check_tst tb_out(
	.ALUResult(ALUResult),
	.ALUSrc_out(ALUSrc_out),
	.MemtoReg_out(MemtoReg_out),
	.ReadData(ReadData),
	.RegDst_out(RegDst_out),
	.display_led(display_led),
	.prode_data_memory(prode_data_memory),
	.prode_register_file(prode_register_file),
	.sampler_rx(sampler)
);
endmodule

